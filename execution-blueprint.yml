# Pheromind Kaizen Initiative: Phase 1 Refactor
# Goal: Implement a continuously executing autonomous system with real-time user oversight.
# This plan addresses the constitutional crisis, prompt intelligence, and user control issues.

files:
  - path: engine/server.js
    action: MODIFY
    summary: >
      Complete rewrite of the engine's core logic. The manifest-driven for-loop will be
      replaced with a persistent, state-driven loop that implements the system's constitution.
      It will feature a main development loop and a non-blocking, asynchronous loop for the
      `@metis` self-improvement agent.
    rationale: >
      This resolves the "Constitutional Crisis" and is the central change required to enable
      true, hands-free autonomy. It makes the engine reactive to state changes, not just a
      dumb script runner.

  - path: engine/agent_dispatcher.js
    action: MODIFY
    summary: >
      Implement real dispatch logic based on the `project_status` found in `state.json`.
      It will replace the simplistic switch-case with logic that can select the correct
      agent (e.g., `@pm`, `@winston`, `@dev`) for the current phase of the project.
    rationale: >
      Ensures the system follows its own documented workflow (e.g., planning before execution)
      autonomously, without needing user intervention to select the next agent.

  - path: cli/index.js
    action: MODIFY
    summary: >
      Deprecate the 'start-engine' and other direct commands in favor of a cleaner interface.
      The primary user interaction will be through the IDE, but we will add new commands
      for lifecycle management that the IDE can call.
    rationale: >
      Simplifies the CLI and aligns with the new paradigm of IDE-centric control. The engine
      is a background service, not something the user should manage with multiple commands.

  - path: builder/dependency_resolver.js
    action: MODIFY
    summary: >
      Implement a full, recursive dependency resolution algorithm. It will parse agent
      files for all relative paths to other files within `.stigmergy-core` and gather them.
    rationale: >
      Fixes the broken build process, ensuring agents bundled for Web UI planning
      (like `@winston`) have their complete context, checklists, and templates.

  - path: builder/prompt_builder.js
    action: MODIFY
    summary: >
      Update the builder to iterate through the complete list of dependencies provided by the
      newly intelligent resolver, formatting each one into the final agent bundle.
    rationale: >
      Works in tandem with the dependency_resolver to create functionally complete and
      intelligent agent prompts for the Web UI.

  - path: installer/install.js
    action: MODIFY
    summary: >
      Rewrite the `.roomodes` generation logic. It will create two types of modes:
      1. Agent modes (e.g., `@winston`) that point to a new `/api/interactive` endpoint.
      2. System control modes (`@system-pause`, `@system-resume`, `@system-cancel`) that
         point to new, dedicated `/api/signal/*` endpoints.
    rationale: >
      This provides the crucial hooks for the user to exert real-time control from the IDE,
      fulfilling the "interactive oversight" requirement.

  - path: .stigmergy-core/agents/design-architect.md
    action: MODIFY
    summary: >
      Upgrade Winston's prompt with new protocols: `CONSTRAINT_FIRST`, `INTERACTIVE_PLANNING`,
      and `SELF_VALIDATION`. This is the template for improving other agents.
    rationale: >
      Directly addresses the need for smarter, safer, and more user-aware agents. It makes
      the planner more collaborative without asking for permission, improving trust and output quality.

  - path: .stigmergy-core/agents/dispatcher.md
    action: MODIFY
    summary: >
      Update Saul's prompt to reflect his true role as the core orchestrator who reads
      `state.json` and dispatches tasks based on the `project_manifest`. Add a command
      for status reporting (`*report_status`).
    rationale: >
      Aligns the agent's documented identity with the new state-driven engine's functionality,
      and gives the user a way to query the system's current state via the IDE.

  - path: .stigmergy-core/agents/meta.md
    action: MODIFY
    summary: >
      Clarify Metis's protocol to state that she runs as a non-blocking background process
      and saves her improvement proposals to a `/system-proposals` directory without
      halting the main development workflow.
    rationale: >
      Ensures the self-improvement loop does not interfere with the primary goal of
      completing the project, as per your direct instruction.

  - path: tools/scraper.js
    action: CREATE
    summary: >
      Create a new, dedicated tool for deep scraping of web pages, likely leveraging a
      robust library like Firecrawl as discussed.
    rationale: >
      Implements the "Lean Toolchain" principle by separating deep content extraction
      from simple, quick web searches.

  - path: tools/web.js
    action: MODIFY
    summary: >
      Refactor the existing web tool to focus exclusively on quick, API-driven search results
      using a service like Serper.
    rationale: >
      Completes the consolidation of web tools, ensuring each has a single, clear responsibility.
