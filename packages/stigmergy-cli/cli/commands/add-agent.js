import { promises as fs } from 'fs';
import path from 'path';
import chalk from 'chalk';

// Helper to get the project root
const getProjectRoot = () => process.cwd();

// Helper to read the stigmergy config and get the custom agents path
async function getCustomAgentsPath() {
  const projectRoot = getProjectRoot();
  const configPath = path.join(projectRoot, 'stigmergy.config.js');

  if (await fs.access(configPath).then(() => true).catch(() => false)) {
    try {
      const configModule = await import(`file://${configPath}`);
      const config = configModule.default;
      if (config && config.custom_agents_path) {
        return path.resolve(projectRoot, config.custom_agents_path);
      }
    } catch (e) {
      console.error(chalk.red('Error reading stigmergy.config.js:'), e);
      return null;
    }
  }
  // Default value from the config file itself
  return path.resolve(projectRoot, './stigmergy-agents');
}

const agentTemplate = (agentName) => `\`\`\`yaml
agent:
  id: ${agentName}
  name: ${agentName.charAt(0).toUpperCase() + agentName.slice(1)}
  persona: >
    - A custom agent. Define your persona here. This agent was generated by the Stigmergy CLI.
  engine_tools:
    - file_system.*
    - shell.*
    - research.*
  core_protocols:
    - file: SIMPLE_EXECUTION_PROTOCOL.md
\`\`\`

---

### Instructions for the ${agentName.charAt(0).toUpperCase() + agentName.slice(1)} Agent:

This is the markdown section where you can provide detailed instructions, examples, and guidelines for your custom agent.
`;

// Main function for the 'add-agent' command
export async function addAgent({ name, force }) {
  if (!name) {
    console.error(chalk.red("❌ Please provide a name for the agent using the --name option."));
    return;
  }

  const agentsDir = await getCustomAgentsPath();
  if (!agentsDir) {
    console.error(chalk.red("❌ Could not determine the custom agents directory. Make sure 'custom_agents_path' is set in stigmergy.config.js."));
    return;
  }

  const agentFileName = `${name}.md`;
  const agentFilePath = path.join(agentsDir, agentFileName);

  console.log(chalk.blue(`✨ Creating a new agent named '${name}' at ${agentFilePath}...`));

  try {
    // Ensure the directory exists
    await fs.mkdir(agentsDir, { recursive: true });

    // Check if the agent file already exists
    if (!force && (await fs.access(agentFilePath).then(() => true).catch(() => false))) {
      console.error(chalk.red(`❌ An agent with the name '${name}' already exists at ${agentFilePath}. Use --force to overwrite.`));
      return;
    }

    // Create the boilerplate content
    const boilerplate = agentTemplate(name);

    // Write the file
    await fs.writeFile(agentFilePath, boilerplate);

    console.log(chalk.green(`✅ Successfully created the new agent: ${agentFileName}`));
    console.log(chalk.gray(`   - Location: ${agentFilePath}`));
    console.log(chalk.yellow(`   - To use this agent, you can now delegate tasks to '@${name}'.`));

  } catch (error) {
    console.error(chalk.red(`❌ An error occurred while creating the agent:`), error);
  }
}
