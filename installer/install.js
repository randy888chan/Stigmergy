const fs = require("fs-extra");
const path = require("path");
const yaml = require("js-yaml");
const chalk = require("chalk");
const ora = require("ora");

require("dotenv").config({ path: path.join(process.cwd(), ".env") });

const CORE_SOURCE_DIR = path.join(__dirname, "..", ".stigmergy-core");
const CWD = process.cwd();

async function run() {
  const spinner = ora("🚀 Initializing Stigmergy...").start();
  try {
    spinner.text = "Copying core files...";
    const coreDestDir = path.join(CWD, ".stigmergy-core");
    await fs.copy(CORE_SOURCE_DIR, coreDestDir, { overwrite: true });

    spinner.text = "Configuring environment file...";
    const exampleEnvPath = path.join(__dirname, "..", ".env.example");
    const projectEnvPath = path.join(CWD, ".env");
    if (!(await fs.pathExists(projectEnvPath))) {
      await fs.copy(exampleEnvPath, projectEnvPath);
    }

    spinner.text = "Configuring IDE integration...";
    await configureIde(coreDestDir);
    spinner.succeed("IDE integration configured in .roomodes");

    console.log(chalk.bold.green("\n✅ Stigmergy installation complete!"));
    console.log(chalk.cyan("Next steps:"));
    console.log("  1. Fill in your API keys in the `.env` file.");
    console.log("  2. Run 'npm start' to launch the Stigmergy engine.");
  } catch (error) {
    spinner.fail("Installation failed.");
    console.error(chalk.bold.red("Error:"), chalk.red(error.message));
  }
}

async function getAgentPersona(agentId, coreDestDir) {
    const agentPath = path.join(coreDestDir, 'agents', `${agentId}.md`);
    if (!await fs.pathExists(agentPath)) return `Default persona for ${agentId}.`;

    const content = await fs.readFile(agentPath, 'utf8');
    const yamlMatch = content.match(/```yaml\n([\s\S]*?)\n```/);
    if (!yamlMatch) return `Default persona for ${agentId}.`;

    const agentConfig = yaml.load(yamlMatch[1]);
    return agentConfig?.persona?.identity || `AI agent ${agentId}.`;
}

async function configureIde(coreDestDir) {
  const modes = [];
  const PORT = process.env.PORT || 3000;
  const ENGINE_URL = `http://localhost:${PORT}`;

  const agentManifestPath = path.join(coreDestDir, "system_docs", "02_Agent_Manifest.md");
  const agentManifestContent = await fs.readFile(agentManifestPath, "utf8");
  const manifest = yaml.load(agentManifestContent.split('---')[0]); // Only parse the YAML part

  if (!manifest || !Array.isArray(manifest.agents)) {
    throw new Error("Agent manifest is invalid or not found.");
  }

  for (const agentConfig of manifest.agents) {
    if (!agentConfig.id || !agentConfig.alias) continue;

    const persona = await getAgentPersona(agentConfig.id, coreDestDir);
    const agentName = agentConfig.name || agentConfig.alias;
    const agentIcon = agentConfig.icon || "🤖";

    modes.push({
      slug: agentConfig.alias,
      name: `${agentIcon} ${agentName}`,
      roleDefinition: persona,
      api: {
        url: `${ENGINE_URL}/api/chat`,
        method: "POST",
        include: ["history"],
        static_payload: { agentId: agentConfig.id },
      },
      groups: ['read'], // Default group
    });
  }

  // --- ADD SYSTEM CONTROL MODES ---
  modes.push(
    {
        slug: "system-start",
        name: "🚀 Start Project",
        roleDefinition: "You are the master control. Provide a high-level goal to start a new project.",
        api: {
            url: `${ENGINE_URL}/api/system/start`,
            method: "POST",
            body: '{"goal": "{{prompt}}"}',
        },
        groups: ["command"],
    },
    {
        slug: "system-pause",
        name: "⏸️ Pause Engine",
        roleDefinition: "You are a system command. Sending any message will pause the autonomous engine.",
        api: { url: `${ENGINE_URL}/api/control/pause`, method: "POST" },
        groups: ["command"],
    },
    {
        slug: "system-resume",
        name: "▶️ Resume Engine",
        roleDefinition: "You are a system command. Sending any message will resume the autonomous engine.",
        api: { url: `${ENGINE_URL}/api/control/resume`, method: "POST" },
        groups: ["command"],
    }
  );

  modes.sort((a, b) => a.name.localeCompare(b.name));

  const yamlOutput = yaml.dump({ customModes: modes });
  const fileContent = `# This file is auto-generated by 'stigmergy install'.\n\n${yamlOutput}`;
  await fs.writeFile(path.join(CWD, ".roomodes"), fileContent, "utf8");
}

module.exports = { run };
