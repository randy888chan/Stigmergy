const fs = require("fs-extra");
const path = require("path");
const yaml = require("js-yaml");
const chalk = require("chalk");
const ora = require("ora");

require("dotenv").config({ path: path.join(process.cwd(), ".env") });

const CORE_SOURCE_DIR = path.join(__dirname, "..", ".stigmergy-core");
const CWD = process.cwd();

async function run() {
  const spinner = ora("ðŸš€ Initializing Stigmergy...").start();
  try {
    spinner.text = "Copying core files...";
    const coreDestDir = path.join(CWD, ".stigmergy-core");
    await fs.copy(CORE_SOURCE_DIR, coreDestDir, { overwrite: true });
    spinner.succeed("Copied core files.");

    spinner.text = "Configuring environment file...";
    const exampleEnvPath = path.join(__dirname, "..", ".env.example");
    const projectEnvPath = path.join(CWD, ".env");
    if (!(await fs.pathExists(projectEnvPath))) {
      await fs.copy(exampleEnvPath, projectEnvPath);
    }
    spinner.succeed("Environment file configured.");

    spinner.text = `Configuring IDE integration...`;
    await configureIde(coreDestDir);
    spinner.succeed(`IDE configuration created at .roomodes.`);

    console.log(chalk.bold.green("\nâœ… Stigmergy installation complete!"));
    console.log(chalk.cyan("Next steps:"));
    console.log("  1. Fill in your API keys in the `.env` file.");
    console.log("  2. Run 'npm start' to launch the Stigmergy engine.");
  } catch (error) {
    spinner.fail("Installation failed.");
    console.error(chalk.bold.red("Error:"), chalk.red(error.message));
  }
}

async function configureIde(coreDestDir) {
  const modes = [];
  const PORT = process.env.PORT || 3000;
  const ENGINE_URL = `http://localhost:${PORT}`;

  const agentManifestPath = path.join(coreDestDir, "system_docs", "02_Agent_Manifest.md");
  const agentManifestContent = await fs.readFile(agentManifestPath, "utf8");
  const manifest = yaml.load(agentManifestContent);

  if (!manifest || !Array.isArray(manifest.agents)) {
    console.warn(
      chalk.yellow(
        "Warning: Agent manifest not found or invalid. Skipping agent mode configuration."
      )
    );
    return;
  }

  for (const agentConfig of manifest.agents) {
    if (!agentConfig.id || !agentConfig.alias) {
      continue;
    }

    // For now, we'll use a generic persona. In the future, we might extract this from agent-specific files or add to manifest.
    const roleDefinition = `You are ${agentConfig.alias}, an AI agent with the ID ${agentConfig.id}.`;

    const agentGroups = [];
    if (agentConfig.tools) {
      if (agentConfig.tools.some((tool) => tool.startsWith("file_system.read")))
        agentGroups.push("read");
      if (agentConfig.tools.some((tool) => tool.startsWith("file_system.write")))
        agentGroups.push("edit");
      if (agentConfig.tools.includes("shell.execute")) agentGroups.push("command");
      if (
        agentConfig.tools.includes("web.search") ||
        agentConfig.tools.includes("scraper.scrapeUrl")
      )
        agentGroups.push("browser");
    }

    if (agentGroups.length === 0) {
      agentGroups.push("read"); // Default to 'read' if no specific tool-based groups are found
    }

    const agentName = agentConfig.name || agentConfig.alias;
    const agentIcon = agentConfig.icon && agentConfig.icon.trim() !== "" ? agentConfig.icon : "ðŸ¤–";

    modes.push({
      slug: agentConfig.alias,
      name: `${agentIcon} ${agentName}`,
      roleDefinition: roleDefinition,
      api: {
        url: `${ENGINE_URL}/api/chat`,
        method: "POST",
        include: ["history"],
        static_payload: { agentId: agentConfig.id },
      },
      groups: agentGroups,
    });
  }

  modes.push({
    slug: "system",
    name: "ðŸš€ Stigmergy Control",
    roleDefinition:
      "You are the master control for the Stigmergy Engine. Use this mode to start new projects by providing a high-level goal.",
    api: {
      url: `${ENGINE_URL}/api/system/start`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: '{"goal": "{{prompt}}"}',
    },
    groups: ["command"],
  });

  modes.sort((a, b) => a.name.localeCompare(b.name));

  const yamlOutput = yaml.dump({ customModes: modes });
  const fileContent = `# This file is auto-generated by 'stigmergy install'. Do not edit manually.\n\n${yamlOutput}`;
  await fs.writeFile(path.join(CWD, ".roomodes"), fileContent, "utf8");
}

module.exports = { run };
