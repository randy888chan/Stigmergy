const fs = require("fs-extra");
const path = require("path");
const yaml = require("js-yaml");
const chalk = require("chalk");
const ora = require("ora");

require("dotenv").config({ path: path.join(process.cwd(), ".env") });

const CORE_SOURCE_DIR = path.join(__dirname, "..", ".stigmergy-core");
const CWD = process.cwd();

function getAgentConfig(agentContent) {
  try {
    const yamlBlockRegex = /```(yaml|yml)\n([\s\S]*?)\n```/;
    const match = agentContent.match(yamlBlockRegex);
    if (!match || !match[2]) return null;
    const config = yaml.load(match[2]);
    return config || null;
  } catch (e) {
    return null;
  }
}

async function run() {
  const spinner = ora("ðŸš€ Initializing Stigmergy...").start();
  try {
    spinner.text = "Copying core files...";
    const coreDestDir = path.join(CWD, ".stigmergy-core");
    await fs.copy(CORE_SOURCE_DIR, coreDestDir, { overwrite: true });
    spinner.succeed("Copied core files.");

    spinner.text = "Configuring environment file...";
    const exampleEnvPath = path.join(__dirname, "..", ".env.example");
    const projectEnvPath = path.join(CWD, ".env");
    if (!(await fs.pathExists(projectEnvPath))) {
      await fs.copy(exampleEnvPath, projectEnvPath);
    }
    spinner.succeed("Environment file configured.");

    spinner.text = `Configuring IDE integration...`;
    await configureIde(coreDestDir);
    spinner.succeed(`IDE configuration created at .roomodes.`);

    console.log(chalk.bold.green("\nâœ… Stigmergy installation complete!"));
    console.log(chalk.cyan("Next steps:"));
    console.log("  1. Fill in your API keys in the `.env` file.");
    console.log("  2. Run 'npm start' to launch the Stigmergy engine.");
  } catch (error) {
    spinner.fail("Installation failed.");
    console.error(chalk.bold.red("Error:"), chalk.red(error.message));
  }
}

async function configureIde(coreDestDir) {
  const modes = [];
  const PORT = process.env.PORT || 3000;
  const ENGINE_URL = `http://localhost:${PORT}`;

  const stigmergyGroup = ["Stigmergy"];
  const agentsDir = path.join(coreDestDir, "agents");
  const agentFiles = await fs.readdir(agentsDir);

  for (const file of agentFiles) {
    if (!file.endsWith(".md")) continue;

    const agentContent = await fs.readFile(path.join(agentsDir, file), "utf8");
    const config = getAgentConfig(agentContent);

    if (!config?.agent?.id || !config?.agent?.alias || !config?.persona?.identity) {
      continue;
    }

    const { agent, persona } = config;
    const roleDefinition = [
      persona.identity,
      persona.role ? `Role: ${persona.role}` : null,
      persona.style ? `Style: ${persona.style}` : null,
    ]
      .filter(Boolean)
      .join("\n\n");

    modes.push({
      slug: agent.alias,
      name: `${agent.icon || "ðŸ¤–"} ${agent.name || agent.alias}`,
      roleDefinition: roleDefinition,
      api: {
        url: `${ENGINE_URL}/api/chat`,
        method: "POST",
        include: ["history"],
        static_payload: { agentId: agent.id },
      },
      groups: ["Stigmergy"],
    });
  }

  modes.push({
    slug: "system",
    name: "ðŸš€ Stigmergy Control",
    roleDefinition:
      "You are the master control for the Stigmergy Engine. Use this mode to start new projects by providing a high-level goal.",
    api: {
      url: `${ENGINE_URL}/api/system/start`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: '{"goal": "{{prompt}}"}',
    },
    groups: ["Stigmergy"],
  });

  modes.sort((a, b) => a.name.localeCompare(b.name));

  const yamlOutput = yaml.dump({ customModes: modes });
  const fileContent = `# This file is auto-generated by 'stigmergy install'. Do not edit manually.\n\n${yamlOutput}`;
  await fs.writeFile(path.join(CWD, ".roomodes"), fileContent, "utf8");
}

module.exports = { run };
