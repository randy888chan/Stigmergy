const fs = require("fs-extra");
const path = require("path");
const yaml = require("js-yaml");
const chalk = require("chalk");
const ora = require("ora");

require('dotenv').config(); // Load .env file

const CORE_SOURCE_DIR = path.join(__dirname, "..", ".stigmergy-core");
const CWD = process.cwd();
const CORE_DEST_DIR = path.join(CWD, ".stigmergy-core");
const ROO_MODES_PATH = path.join(CWD, ".roomodes");

const PHEROMIND_CONFIG_START_MARKER = "// --- PHEROMIND MODES START ---";
const PHEROMIND_CONFIG_END_MARKER = "// --- PHEROMIND MODES END ---";

async function run() {
  const spinner = ora("ðŸš€ Welcome to the Pheromind Framework Installer.").start();

  try {
    spinner.text = "Copying .stigmergy-core knowledge base...";
    await fs.copy(CORE_SOURCE_DIR, CORE_DEST_DIR, { overwrite: true });
    spinner.succeed("Copied .stigmergy-core knowledge base.");

    spinner.text = "Configuring IDE (.roomodes)...";
    await configureIde();
    spinner.succeed(`IDE configuration updated at ${path.basename(ROO_MODES_PATH)}.`);

    console.log(chalk.bold.green("\nâœ… Installation complete!"));
  } catch (error) {
    spinner.fail("Installation failed.");
    console.error(chalk.red(error));
  }
}

async function configureIde() {
  const customModes = [];
  const ENGINE_URL = process.env.ENGINE_URL || "http://localhost:3000";

  const agentFiles = await fs.readdir(path.join(CORE_DEST_DIR, "agents"));
  for (const file of agentFiles) {
    if (!file.endsWith(".md")) continue;
    const agentId = path.basename(file, ".md");
    const agentContent = await fs.readFile(path.join(CORE_DEST_DIR, "agents", file), "utf8");
    const yamlMatch = agentContent.match(/```(yaml|yml)\n([\s\S]*?)```/i);
    if (!yamlMatch || !yamlMatch) continue;

    const config = yaml.load(yamlMatch);
    const agentConfig = config?.agent;
    if (!agentConfig?.alias) continue;

    customModes.push({
      slug: agentConfig.alias,
      name: `${agentConfig.icon || "ðŸ¤–"} ${agentConfig.name}`,
      api: {
        url: `${ENGINE_URL}/api/interactive`,
        method: "POST",
        include: ["history", "context"],
        static_payload: { agentId: agentConfig.id },
      },
      groups: ["pheromind-agent"],
    });
  }

  const sortedModes = customModes.sort((a, b) => a.name.localeCompare(b.name));
  const configString = `customModes: ${JSON.stringify(sortedModes, null, 2)}`;
  const newConfigBlock = `${PHEROMIND_CONFIG_START_MARKER}\n// This block is auto-generated by 'stigmergy install'. Do not edit manually.\n${configString}\n${PHEROMIND_CONFIG_END_MARKER}`;

  let finalContent;
  if (await fs.pathExists(ROO_MODES_PATH)) {
    const content = await fs.readFile(ROO_MODES_PATH, "utf8");
    const markerRegex = new RegExp(`${PHEROMIND_CONFIG_START_MARKER}[\\s\\S]*?${PHEROMIND_CONFIG_END_MARKER}`, "g");
    finalContent = markerRegex.test(content)
      ? content.replace(markerRegex, newConfigBlock)
      : `${content}\n\nmodule.exports.customModes = (module.exports.customModes || []).concat(${JSON.stringify(sortedModes)});\n`;
  } else {
    finalContent = `// Roo Code Configuration\n\nmodule.exports = {\n  ${configString}\n};\n`;
  }
  await fs.writeFile(ROO_MODES_PATH, finalContent, "utf8");
}

module.exports = { run };
