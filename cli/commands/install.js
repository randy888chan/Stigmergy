import fs from "fs-extra";
import path from "path";
import yaml from "js-yaml";
import coreBackup from "../../services/core_backup.js";
import { validateAgents } from "./validate.js";
import { fileURLToPath } from "url";

async function configureIde(coreSourceDir, outputPath = path.join(process.cwd(), ".roomodes")) {
  console.log("Configuring IDE for Stigmergy...");
  const PORT = process.env.PORT || 3000;
  const ENGINE_URL = `http://localhost:${PORT}`;
  
  const manifestPath = path.join(coreSourceDir, "system_docs", "02_Agent_Manifest.md");
  const manifestContent = await fs.readFile(manifestPath, "utf8");
  const manifest = yaml.load(manifestContent.match(/```(?:yaml|yml)\n([\s\S]*?)\n```/)[1]);

  const customModes = [];
  const agentsDir = path.join(coreSourceDir, "agents");

  for (const agent of manifest.agents) {
    const agentPath = path.join(agentsDir, `${agent.id}.md`);
    if (!await fs.pathExists(agentPath)) continue;
    
    const rawAgentDefinition = await fs.readFile(agentPath, "utf8");
    const agentConfig = yaml.load(rawAgentDefinition.match(/```(?:yaml|yml)\n([\s\S]*?)\n```/)[1]).agent;

    if (agentConfig.is_interface) {
      // --- START OF CRITICAL FIX ---
      // Build a comprehensive roleDefinition
      let roleDefString = `You are ${agentConfig.name} (${agentConfig.alias}).\n\n`;
      roleDefString += `**Role:** ${agentConfig.persona.role}\n`;
      if (agentConfig.persona.identity) {
        roleDefString += `**Identity:** ${agentConfig.persona.identity}\n`;
      }
      
      if (agentConfig.core_protocols && agentConfig.core_protocols.length > 0) {
        roleDefString += `\n**CORE PROTOCOLS (You MUST follow these rules):**\n`;
        agentConfig.core_protocols.forEach(protocol => {
          // Clean up the protocol string for better display
          const cleanedProtocol = protocol.replace(/\s+/g, ' ').trim();
          roleDefString += `- ${cleanedProtocol}\n`;
        });
      }
      // --- END OF CRITICAL FIX ---

      const mode = {
        slug: (agentConfig.alias.startsWith("@") ? agentConfig.alias.substring(1) : agentConfig.alias),
        name: `${agentConfig.icon || "ðŸ¤–"} ${agentConfig.name}`,
        roleDefinition: roleDefString,
        groups: agentConfig.ide_tools || [],
        api: {
          url: `${ENGINE_URL}/api/chat`,
          method: "POST",
          include: ["history"],
          static_payload: { agentId: agentConfig.id },
        },
      };

      const hasMcpTool = (agentConfig.ide_tools || []).includes("mcp");
      if (hasMcpTool) {
        mode.source = agentConfig.source || "project";
      }

      customModes.push(mode);
    }
  }

  customModes.sort((a, b) => a.name.localeCompare(b.name));

  const yamlOutput = yaml.dump({ customModes: customModes }, { noArrayIndent: true });
  const fileContent = `# This file is auto-generated by 'stigmergy install'.\n\n${yamlOutput}`;
  await fs.writeFile(outputPath, fileContent, "utf8");
}

export async function install() {
  const targetDir = process.cwd();
  const targetCoreDir = path.join(targetDir, ".stigmergy-core");
  const sourceCoreDir = path.resolve(path.dirname(fileURLToPath(import.meta.url)), "../../.stigmergy-core");
  
  if (await fs.pathExists(targetCoreDir)) {
      console.log("Preserving existing .stigmergy-core configuration.");
  } else {
      await fs.copy(sourceCoreDir, targetCoreDir);
      console.log(".stigmergy-core installed.");
  }

  const agentsValid = await validateAgents(targetCoreDir);
  if (!agentsValid.success) {
    console.error("Agent validation failed. Please check your agent definitions.");
    return false;
  }
  
  await configureIde(targetCoreDir);
  
  await coreBackup.autoBackup();

  console.log("âœ… Setup complete. Your IDE is now configured.");
  return true;
}