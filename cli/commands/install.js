import fs from "fs-extra";
import path from "path";
import yaml from "js-yaml";

export async function configureIde(
  coreSourceDir,
  outputPath = path.join(process.cwd(), ".roomodes")
) {
  console.log("Configuring IDE...");
  const PORT = process.env.PORT || 3000;
  const ENGINE_URL = `http://localhost:${PORT}`;

  const manifestPath = path.join(coreSourceDir, "system_docs", "02_Agent_Manifest.md");
  if (!fs.existsSync(manifestPath)) {
      console.warn("Agent Manifest not found. Skipping IDE configuration.")
      return;
  }
  const manifestContent = await fs.readFile(manifestPath, "utf8");

  const manifestYamlMatch = manifestContent.match(/```(?:yaml|yml)\n([\s\S]*?)\s*```/);
  if (!manifestYamlMatch || !manifestYamlMatch[1]) {
    throw new Error(`Invalid manifest format in ${manifestPath}`);
  }
  const manifest = yaml.load(manifestYamlMatch[1]);

  const customModes = [];
  const existingAliases = new Set();
  const agentsDir = path.join(coreSourceDir, 'agents');

  for (const agent of manifest.agents) {
    const agentId = agent.id;
    const agentExtensions = ['.md', '.yml', '.yaml'];
    let rawAgentDefinition = null;
    let agentFile = null;

    for (const ext of agentExtensions) {
        const currentFile = `${agentId}${ext}`;
        const agentPath = path.join(agentsDir, currentFile);
        if (await fs.pathExists(agentPath)) {
            rawAgentDefinition = await fs.readFile(agentPath, 'utf8');
            agentFile = currentFile;
            break;
        }
    }

    if (!rawAgentDefinition) {
        console.warn(`Skipping agent ${agentId}: No definition file found.`);
        continue;
    }

    try {
      let agentData = {};
      try {
        const yamlMatch = rawAgentDefinition.match(/```(?:yaml|yml)\n([\s\S]*?)\s*```/);
        if (yamlMatch) {
          agentData = yaml.load(yamlMatch[1]);
        }
      } catch (e) {
        console.warn(`Using minimal definition for ${agentId}: ${e.message}`);
        agentData = { agent: { id: agentId, name: agentId } };
      }

      if (!agentData.agent) {
        console.warn(`Agent data for ${agentId} is missing 'agent' property. Skipping.`);
        continue;
      }

      let alias = agentData.agent?.alias || `@${agentId.split('_')[0]}`;
      if (existingAliases.has(alias)) {
        console.warn(`Duplicate alias detected: ${alias}`);
        alias = `${alias}_${agentId}`; // Add unique suffix
      }
      existingAliases.add(alias);

      const finalGroups = [];
      let source = null;
      const tools = agentData.tools || [];
      for (const tool of tools) {
        if (tool.startsWith("mcp:")) {
          source = tool.split(":")[1].trim();
        } else {
          finalGroups.push(tool);
        }
      }

      const mode = {
        slug: alias,
        name: `${agentData.agent.icon || 'ü§ñ'} ${agentData.agent.name}`,
        roleDefinition: rawAgentDefinition,
        groups: finalGroups,
        api: {
          url: `${ENGINE_URL}/api/chat`,
          method: "POST",
          include: ["history"],
          static_payload: {
            agentId: agentData.agent.id,
          },
        },
      };

      if (source) {
        mode.source = source;
      }

      customModes.push(mode);
    } catch (error) {
      console.error(`Skipping agent ${agentFile}: ${error.message}`);
    }
  }

  customModes.unshift(
    {
      slug: "system-resume",
      name: "‚ñ∂Ô∏è Resume Engine",
      roleDefinition: "Resume the autonomous engine.",
      api: { url: `${ENGINE_URL}/api/control/resume`, method: "POST" },
      groups: ["command"],
    },
    {
      slug: "system-pause",
      name: "‚è∏Ô∏è Pause Engine",
      roleDefinition: "Pause the autonomous engine.",
      api: { url: `${ENGINE_URL}/api/control/pause`, method: "POST" },
      groups: ["command"],
    }
  );

  customModes.sort((a, b) => a.name.localeCompare(b.name));

  const yamlOutput = yaml.dump({ customModes: customModes }, { lineWidth: -1 });
  const fileContent = `# This file is auto-generated by 'stigmergy install'.\n\n${yamlOutput}`;
  await fs.writeFile(outputPath, fileContent, "utf8");
}

async function install() {
  console.log("Starting install...");
  const targetDir = process.cwd();

  // Respect the core_path from global config if it's set (for testing)
  const coreDir = global.StigmergyConfig?.core_path || path.join(targetDir, ".stigmergy-core");

  if (fs.existsSync(coreDir)) {
    console.log("‚úÖ .stigmergy-core already exists - preserving your brain");
    await configureIde(coreDir);
    console.log(`‚úÖ Install complete. .roomodes file updated.`);
    return true;
  } else {
    console.error("‚ùå CRITICAL: .stigmergy-core not found in the project root.");
    console.error("Please ensure the .stigmergy-core directory is present to run the install.");
    return false;
  }
}

export { install };
