import fs from "fs-extra";
import path from "path";
import yaml from "js-yaml";
import { fileURLToPath } from "url";
import { dirname } from "path";

export async function configureIde(
  coreSourceDir,
  outputPath = path.join(process.cwd(), ".roomodes")
) {
  const PORT = process.env.PORT || 3000;
  const ENGINE_URL = `http://localhost:${PORT}`;

  // 1. Load the agent manifest
  const manifestPath = path.join(coreSourceDir, "system_docs", "02_Agent_Manifest.md");
  const manifestContent = await fs.readFile(manifestPath, "utf8");
  const manifestYamlMatch = manifestContent.match(/```(?:yaml|yml)\n([\s\S]*?)\s*```/);
  if (!manifestYamlMatch) {
    throw new Error(`Could not parse YAML from manifest file: ${manifestPath}`);
  }
  const manifest = yaml.load(manifestYamlMatch[1]);

  // 2. Create customModes array
  const customModes = [];

  for (const agent of manifest.agents) {
    const agentFile = path.join(coreSourceDir, "agents", `${agent.id}.md`);
    if (await fs.pathExists(agentFile)) {
      const content = await fs.readFile(agentFile, "utf8");
      const yamlMatch = content.match(/```(?:yaml|yml)\n([\s\S]*?)\s*```/);

      if (yamlMatch && yamlMatch[1]) {
        try {
          const agentData = yaml.load(yamlMatch[1]);

          let roleDefinition = "";
          if (agentData.persona && agentData.persona.role) {
            roleDefinition = agentData.persona.role;
          }

          const tools = agentData.tools || ["read", "edit"];

          customModes.push({
            slug: agentData.agent.alias,
            name: `${agentData.agent.icon} ${agentData.agent.name}`,
            roleDefinition: roleDefinition,
            groups: tools,
            api: {
              url: `${ENGINE_URL}/api/chat`,
              method: "POST",
              include: ["history"],
            },
            source: agentData.source,
          });
        } catch (e) {
          console.warn(`Skipping agent due to YAML parse error: ${agent.id}`);
        }
      }
    }
  }

  // 3. Sort modes alphabetically by name
  customModes.sort((a, b) => a.name.localeCompare(b.name));

  // 4. Generate the YAML output with CORRECT format
  const yamlOutput = yaml.dump({ customModes: customModes }, { lineWidth: -1 });
  const fileContent = `# This file is auto-generated by 'stigmergy install'.\n\n${yamlOutput}`;
  await fs.writeFile(outputPath, fileContent, "utf8");
}

async function install() {
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);
  console.log("Stigmergy install process started...");
  const targetDir = process.cwd();
  const sourceDir = path.resolve(__dirname, "../../.stigmergy-core");

  try {
    const destStigmergyDir = path.join(targetDir, ".stigmergy-core");
    if (!(await fs.pathExists(destStigmergyDir))) {
      await fs.copy(sourceDir, destStigmergyDir);
      console.log(`Copied .stigmergy-core to ${targetDir}`);
    }

    await configureIde(destStigmergyDir);

    console.log(`✅ Install complete. .roomodes file created.`);
    return true;
  } catch (error) {
    console.error("❌ An unexpected error occurred during the install process:");
    console.error(error);
    return false;
  }
}

export { install };
