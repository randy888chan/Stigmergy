{
  "benchmark": {
    "name": "Stigmergy System Performance Benchmark",
    "version": "1.0.0",
    "description": "Standardized benchmark to measure Stigmergy system performance inspired by SWE-bench",
    "problems": [
      {
        "id": "problem-1",
        "title": "Simple File Creation Task",
        "description": "Create a simple JavaScript file that exports a function to calculate the factorial of a number",
        "expected_files": ["factorial.js"],
        "success_criteria": [
          "The file factorial.js should exist",
          "The file should export a function named 'factorial'",
          "The function should correctly calculate factorial for numbers 0-10",
          "The function should handle edge cases (negative numbers, non-integers)"
        ],
        "validation_script": "validate_factorial.js",
        "difficulty": "easy"
      },
      {
        "id": "problem-2",
        "title": "API Endpoint Implementation",
        "description": "Implement a REST API endpoint using Express.js that returns a list of users from a mock database",
        "expected_files": ["server.js", "routes/users.js"],
        "success_criteria": [
          "The server should start without errors",
          "GET /api/users should return a JSON array of users",
          "Each user should have id, name, and email properties",
          "The endpoint should handle errors gracefully"
        ],
        "validation_script": "validate_api.js",
        "difficulty": "medium"
      },
      {
        "id": "problem-3",
        "title": "React Component Development",
        "description": "Create a React component that displays a list of items with search functionality",
        "expected_files": ["components/ItemList.js", "components/SearchBar.js"],
        "success_criteria": [
          "The component should render a list of items",
          "The search bar should filter items based on user input",
          "The component should handle empty states appropriately",
          "The component should be properly styled"
        ],
        "validation_script": "validate_react.js",
        "difficulty": "medium"
      },
      {
        "id": "problem-4",
        "title": "Database Integration Task",
        "description": "Implement a simple database integration using a library like mongoose or sequelize",
        "expected_files": ["models/User.js", "controllers/userController.js", "config/database.js"],
        "success_criteria": [
          "The database connection should be established successfully",
          "CRUD operations should work correctly",
          "Proper error handling should be implemented",
          "Data validation should be in place"
        ],
        "validation_script": "validate_database.js",
        "difficulty": "hard"
      },
      {
        "id": "problem-5",
        "title": "Testing Implementation",
        "description": "Add unit tests for an existing JavaScript module using Jest",
        "expected_files": ["__tests__/calculator.test.js", "calculator.js"],
        "success_criteria": [
          "Tests should cover all major functions",
          "Tests should include edge cases",
          "Test coverage should be above 80%",
          "Tests should pass without errors"
        ],
        "validation_script": "validate_testing.js",
        "difficulty": "medium"
      },
      {
        "id": "problem-6",
        "title": "Full Stack CRUD API",
        "description": "Create a complete, in-memory CRUD API for a 'notes' resource using Node.js and Express. The API should have routes to create, read, update, and delete notes. Each note should have an id, title, and content. The server should run on port 3001. Create Jest tests to verify all endpoints.",
        "expected_files": ["server.js", "notes.test.js"],
        "success_criteria": [
          "The server starts successfully on port 3001",
          "POST /notes creates a new note",
          "GET /notes returns all notes",
          "GET /notes/:id returns a single note",
          "PUT /notes/:id updates a note",
          "DELETE /notes/:id deletes a note",
          "All Jest tests for the endpoints must pass"
        ],
        "validation_script": "validate_crud_api.js",
        "difficulty": "hard"
      }
    ],
    "execution": {
      "timeout": 300000,
      "max_retries": 3,
      "environment": {
        "node_version": ">=16.0.0",
        "required_packages": ["express", "jest", "mongoose"]
      }
    }
  }
}